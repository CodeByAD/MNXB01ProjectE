#include <iostream>

using namespace std;

// ROOT library obejcts
#include <TF1.h> // 1d function class
#include <TH1.h> // 1d histogram classes
#include <TStyle.h>  // style object
#include <TMath.h>   // math functions
#include <TCanvas.h> // canvas object
#include <fstream> // input/output file stream class

double findtemp(Double_t daytemps[], Int_t samedaycount, string desire){
	Double_t hottest = -300;
	Double_t coldest = 1000000000000;	
	for(Int_t l = 0; l<samedaycount; l++){
	
		if(daytemps[l]>hottest){
			hottest = daytemps[l];			
		}
		if(daytemps[l]<coldest){
			coldest = daytemps[l];		
		}
	
	}

	if(desire == "hot"){
		return hottest;
	}
	if(desire == "cold"){
		return coldest;
	}
}

//function producing histograms for the hottest and coldest days each year
void minmaxhist(){ 

Double_t temparr[10];
for(Int_t n = 0; n<10; n++){
	temparr[n] = n;
}

//Some variables
Int_t lines = 5000; //#lines in the data file
string date; // takes the read string yyyy-mm-dd
string dates[lines]; //An array for storing dates, as multiple measurements are done each day the size is greater than 365. Size can be increased by changing variable lines.
Double_t temp; //Stores the temp for a date and puts it into temps1d.
Double_t temps[lines]; //Stores all temperatures for later comparison.
Double_t daytemps[lines]; //Stores the temperatures of one day at a time, made at least big enough given #lines in the data file.
Double_t hottemps[365];
Double_t coldtemps[365];
Int_t linenr = -1; //Keeps track of which line in the data-file is being investigated. Begins at -1 due to loop-structures.
string year = "1962"; //The year to investigate, this can be changed. A string variable to be easily comparable to the data

// open input file
ifstream file("Cleaneddata");


cout << "Creating histograms for the hottest and coldest days each year." << endl;
// create a histogram hPhi
TH1D* HChist = new TH1D("HChist", "Hottest temperatures; Day of year; Temperature [celcius]", 365, 0, 365); //We are not dealing with leap year now.

//handles one line of the data-file at a time
while(file >> date >> temp){
	linenr++;	
	//cout << date << endl;
	dates[linenr] = date;
	temps[linenr] = temp;
}
//cout << "linenr " << linenr << endl;
//Now filling the rest of dates and temps with a string and value respectively marking the end of data from the data-file. (This is probably not necessary)
for(Int_t k = linenr+1; k<lines; k++){
	dates[k] = "end"; //These strings will be sorted away
	temps[k] = -300; //These (impossible) temperatures will be sorted away
}

Int_t j = 0; 
Int_t day = 0;
while(j<=linenr){
	Int_t samedaycount = 0;//the number of temperatures measurements during a day	
	string currentday; //the day that is being investigated 
	if(dates[j].substr(0, 4) == year){//To find the correct year
		currentday = dates[j].substr(5,5);
		while(dates[j].substr(5,5) == currentday){//To only get temp. from one day
			//cout << dates[j].substr(5,5) << " ";
			daytemps[samedaycount] = temps[j];
			samedaycount++;
			j++;
			if(dates[j].substr(0, 4) != year){
				break;	//breaks out of the loop if the year changed
			}
			}

		hottemps[day] = findtemp(daytemps, samedaycount, "hot");
		coldtemps[day] = findtemp(daytemps, samedaycount, "cold");
		day++;

	}

	else{
	j++;
	}
}


for(Int_t i = 0; i<day; i++){
cout << "Day " << i <<"  Hottemp " << hottemps[i] << " Coldtemp " << coldtemps[i] << endl;
}

cout << "Days " << day << endl; //We don't have a whole year's worth of days for year 1962, (we got from 01-01 to 11-06

};


/*
int hotcold(){//Takes a list of temperatures from a year and returns a list with the hottest temperatures for each day and the coldest temperatures for each day respectively.
//Also returns which of these are the hottest or coldest.

}
*/

/*
General notes:
*Can search for "cout" to see if I have test-prints anywhere they shouldnt be
*Remember to remove "unnecessary"/"unhelpful" comments like these when the program is done.

*/



